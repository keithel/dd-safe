#!/bin/bash

set -u

function usage() {
    echo "Usage: $0 [options] <input-file> <output-device>"
    echo "Options:"
    echo "  -h, --help        Show this help message"
    echo "  -v, --verbose     Print verbose output"
    echo "  -l, --lower-limit  Lower size limit in GB (default: 7)"
    echo "  -u, --upper-limit  Upper size limit in GB (default: 32)"
    echo "  -d, --dry-run      Dry run mode (do not execute dd)"
}

options=$(getopt -o hvl:u:d -l help,verbose,dry-run,lower-limit:,upper-limit: -- "$@")
if [[ $? -ne 0 ]]; then
    usage
    exit 1
fi

set -e

eval set -- "$options"

# Default limits if not specified
lower_limit=7
upper_limit=32
verbose=false
dry_run=false

while true; do
    case "$1" in
        -h|--help)
            usage
            exit 0
        ;;
        -v|--verbose)
            verbose=true
            shift
        ;;
        -d|--dry-run)
            dry_run=true
            shift
        ;;
        -l|--lower-limit)
            lower_limit="$2"
            shift 2
        ;;
        -u|--upper-limit)
            upper_limit="$2"
            shift 2
        ;;
        --)
            shift
            break
        ;;
        *)
            echo >&2 "Invalid option: $1"
            exit 1
        ;;
    esac
done

# Check if lower limit and upper limit are integers
if [[ ! "$lower_limit" =~ ^[0-9]+$ ]] || [[ ! "$upper_limit" =~ ^[0-9]+$ ]]; then
    echo >&2 "Error: Lower limit and upper limit must be integers."
    exit 1
fi

# Check if lower limit is less than upper limit
if [[ $lower_limit -ge $upper_limit ]]; then
    echo >&2 "Error: Lower limit must be less than upper limit."
    exit 1
fi

# Get the input file and output device
# use :- to provide a default to make `set -u` happy.
input_file="${1:-}"
output_device="${2:-}"

# Check if input file and output device are provided
if [[ -z "$input_file" || -z "$output_device" ]]; then
    echo >&2 "Error: Please provide an input file and an output device."
    usage
    exit 1
fi

# Check if the input file or device exists and is a block or character device
if [[ ! -b "$input_file" && ! -c "$input_file" && ! -f "$input_file" ]]; then
    echo >&2 "Error: Input file '$input_file' does not exist or is not a block, character, or regular file."
    exit 1
fi

# Check if the output device exists and is a block device
if [[ ! -b "$output_device" ]]; then
    echo >&2 "Error: Output device '$output_device' does not exist or is not a block device."
    exit 1
fi

# Get the size of the output device in GB
disk_size=$(lsblk -b --noheadings -o SIZE "$output_device" | head -1)
disk_size_gb=$((disk_size / 1000 / 1000 / 1000))

if $verbose; then
    # Determine the maximum width for formatting
    max_width=$(printf "%d\n" "$disk_size_gb" "$lower_limit" "$upper_limit" | wc -L)

    printf "Disk size:   %${max_width}d GB\n" "$disk_size_gb"
    printf "Lower limit: %${max_width}d GB\n" "$lower_limit"
    printf "Upper limit: %${max_width}d GB\n" "$upper_limit"
fi

# Check if disk size is within the range
if [[ $disk_size_gb -ge $lower_limit && $disk_size_gb -le $upper_limit ]]; then
    if $verbose; then
        echo "Disk size is within the allowed range."
    fi
    if $dry_run; then
        echo "Dry run: dd if=\"$input_file\" of=\"$output_device\" bs=1M"
    else
        trap 'sudo -k' EXIT
        sudo dd if="$input_file" of="$output_device" bs=1M
    fi
else
    echo >&2 "Error: Disk size is not within the allowed range. dd operation aborted."
    exit 1
fi
